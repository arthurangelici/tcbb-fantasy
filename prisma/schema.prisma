// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  points        Int       @default(0)
  category      TournamentCategory?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  predictions    Prediction[]
  tournamentBets TournamentBet[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id          String   @id @default(cuid())
  name        String
  ranking     Int      @unique
  image       String?
  nationality String   @default("Brasil")
  age         Int?
  category    TournamentCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  matchesAsPlayer1 Match[] @relation("Player1Matches")
  matchesAsPlayer2 Match[] @relation("Player2Matches")
  tournamentBets   TournamentBet[]

  @@map("players")
}

model Match {
  id          String      @id @default(cuid())
  player1Id   String
  player2Id   String
  category    TournamentCategory
  round       TournamentRound
  status      MatchStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  
  // Result fields
  winner          String? // player1 or player2
  player1Sets     Int     @default(0)
  player2Sets     Int     @default(0)
  player1Games    String? // "6-4,6-3" format for games per set
  player2Games    String?
  hadTiebreak     Boolean @default(false)
  totalDuration   Int?    // in minutes
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player1     Player       @relation("Player1Matches", fields: [player1Id], references: [id])
  player2     Player       @relation("Player2Matches", fields: [player2Id], references: [id])
  predictions Prediction[]

  @@map("matches")
}

model Prediction {
  id      String @id @default(cuid())
  userId  String
  matchId String

  // Prediction fields
  winner          String? // player1 or player2
  exactScore      String? // "2-0" or "2-1"
  goesToThirdSet  Boolean?
  firstSetWinner  String? // player1 or player2
  willHaveTiebreak Boolean?
  marginOfVictory  MarginType? // CLOSE or COMFORTABLE
  
  // Points earned (calculated after match)
  pointsEarned Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("predictions")
}

model TournamentBet {
  id       String @id @default(cuid())
  userId   String
  type     TournamentBetType
  category TournamentCategory?

  // Bet fields
  playerId String?
  matchId  String?
  value    String? // For custom bets like "longest match"
  
  // Points earned
  pointsEarned Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  player Player? @relation(fields: [playerId], references: [id])

  @@unique([userId, type, category])
  @@map("tournament_bets")
}

enum UserRole {
  USER
  ADMIN
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum TournamentRound {
  FIRST_ROUND
  ROUND_OF_16
  QUARTERFINALS
  SEMIFINALS
  FINAL
}

enum MarginType {
  CLOSE
  COMFORTABLE
}

enum TournamentBetType {
  CHAMPION
  RUNNER_UP
  SEMIFINALIST
  QUARTERFINALIST
  BIGGEST_UPSET
  LONGEST_MATCH
  MOST_ACES
  BEST_COMEBACK
}

enum TournamentCategory {
  A
  B
  C
}